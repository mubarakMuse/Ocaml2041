CSci 2041: Advanced Programming Principles
Fall 2017, University of Minnesota
Getting Started with Using OCaml
The purpose of this document

We will spend time during the semester learning about nifty principles and techiques that underlie advanced modern-day programming. To test our understanding of what we learn, we will write actual code in OCaml. For us to be able to do this, we will also have to learn things about OCaml. This will happen slowly. OCaml is a new language for many of you so it is natural if you are nervous about working with it: all of us are nervous when we start with something new. However, I think you will get to enjoy the experience and, in the long run, will probably think twice before you decide to program in any language other than OCaml. I am only joking about this, there are other nice languages to program in, such as Python, Java (okay, maybe only sometimes), Haskell, etc, I mainly mean that I am hoping you will want to add OCaml to your repertoire after this term.
When you start programming in a new language, it is quite important to also get used to a mode in which to work with it. Usually, the end result of a programming endeavour is clear: you want to develop a piece of code that the end-user can run without paying attention to what language it was developed in or what principles were used in the process. We will see later how you can do this with programs you write in OCaml, i.e. how you can compile and link them and then run them in standalone mode. However, for us as programmers, the phase that is most important is the one in which we develop the program. During this phase we obviously have to pay attention to the language we use and the convenient ways to create and test programs in it. It is this that I am going to focus on in this document. I will explain to you how you can create and run some simple programs in OCaml and we will build on this in one of the early labs in the course. Try to understand the model carefully: doing so now can help you focus on the actual task you will need to tackle later, that of solving problems of interest by writing code that runs in OCaml.

An editorial note: you might find it easier to understand what is in this document by sitting down by a computer and actually typing up the pieces of code, directives, etc, that you find below. This is what I did when I created this document so I can guarantee that it will all run; your job will be to focus on what is happening when you do certain things and perhaps experiment a little based on questions that arise in your mind.

The real stuff

But let us get to the details. The typical mode in which we run OCaml when developing programs is an interactive one: when we start OCaml up, it gets into what we might call a "read-analyze-evaluate-display" loop. In this interaction loop you can define functions and ask for expressions that use these functions to be evaluated; the "analyze" part of the description refers to the fact that there may be errors in what you present to OCaml, in which case it has to figure these errors out and tell you about them so that you can fix them and try again.
Simple interactions with OCaml

Let us get a bit more specific to understand these notions better. To start OCaml up, you would type ocaml at the command level. OCaml will then print some introductory text and present you with a prompt:
gopalan@rishabh (~/teaching/umn/CSCI2041) % ocaml
	OCaml version 4.01.0

#
Note the # in the last line above. This is OCaml's prompt: it signals that OCaml is ready for you to present it expressions that it will analyze and calculate for you.
Perhaps the simplest kind of expression that you can type in is an arithmetic one. An example interaction of this kind may be the following:

# 2 + 3 ;;
- : int = 5
#
What has happened here is that the user has typed in the expression 2 + 3, OCaml has calculated the value of the expression as 5, displayed this and it has then become ready for another expression to be input.
A few fine points to note in the above example.

The user typically needs to signify the end of the expression he/she wants evaluated. At the interaction level, this is done by typing two semicolons at the end; this is why 2 + 3 is followed by these two semicolons.
Before OCaml evaluates an expression, it checks if it is type correct. OCaml is what we call a strongly typed language: what this means is that OCaml must know the type of an expression before it even thinks of computing it. OCaml can often infer the type of expressions, freeing you from having to be explicit about every little detail. However, don't let this lull you into complacency: as we will start to appreciate very early in the course, types determine the very structure of a program so you should always be thinking about them even if you do not write them out explicitly. In this case, OCaml was able to determine that the type of the expression it has been given is int (for integer).
Once OCaml has figured out the expression is syntactically okay and that it also type-checks, it goes ahead and computes the expression and displays the result to you together with the type it has figured out for the expression. This is what you see in the second line above, that line is what OCaml causes to be displayed.
Having completed this action, OCaml returns to the beginning of the loop, i.e., it is ready for the next expression or interaction, something that it signals by displaying the prompt again.
Lets pause for a moment here to consider a common kind of "mistake" one might make: what happens if you forget to type the two semicolons to end your input to OCaml? Not a problem: OCaml will think that you are continuing your input on to the next line so you can type the semicolons there. Similarly, you can spread your input across two lines. The following examples show these two kinds of interactions:

# 2 + 3
  ;;
- : int = 5
# 2 +
   3;;
- : int = 5
#
Binding identifiers to expressions

In any significant programming task, you will typically want to build up what you want to compute in pieces: associate names with particular expressions, define functions that you can later use over these expressions, etc, and then eventually combine all of these to realize a complex computation. OCaml allows you to realize this style of programming essentially by giving you a mechanism to associate names with expressions. This is what is known as a let declaration.
Simple let declarations

The simplest form for a let declaration is the following:
   let <name> = <exp> ;;
Generally, when we write something within angle brackets (as we have done in writing <name> for example), we mean it to stand for a category of expressions. Here, <name> stands for a token that is recognized as a identifier (we won't get into the details here of what constitutes such a token, we will use simple examples for which things will be clear even without such an explanation) and <exp> stands for OCaml expressions of the kind we have already seen.
Here is an example of the use of such a declaration.

# let five = 2 + 3 ;;
val five : int = 5
# five ;;
- : int = 5
#
In this interaction, we have first asked OCaml to associate the name five with the result of evaluating the expression 2 + 3. OCaml tells us that it has done this through the display on the second line. Then we have checked that it has actually done this by asking it to evaluate the identifier five. OCaml responds in the way we have understood earlier.
Binding a name to a function expression

Let declarations can also be used to associate function expressions with names. The structure of such a declaration is the following
  let <fnname> <argname-1> ... <argname-n> = <exp>
We will understand various aspects of function expressions later in the course. For the moment, it is enough to understand the following: what such a binding does is associate a function with the identifier used for <fnname>. The function is something that essentially produces a value using <exp> after replacing <argname-1>,...,<argname-n> in it by given values.
That was a mouthful! But the concept is very simple, especially when you see it in an example. Here is one.

# let plus x y = x + y ;;
val plus : int -> int -> int = <fun>
#
What the declaration has done is associate the name plus with a function that takes two integers and produces an integer. This is what OCaml is telling us in the display. We can now use the function in further expressions:
# plus 2 3 ;;
- : int = 5
#Last login: Sun Sep 10 19:40:47 on ttys000
ums-10-139-168-40:~ mubarakmuse$ brew install ocaml
-bash: brew: command not found
ums-10-139-168-40:~ mubarakmuse$ port install ocaml
-bash: port: command not found
ums-10-139-168-40:~ mubarakmuse$ apt-get install ocaml
-bash: apt-get: command not found
ums-10-139-168-40:~ mubarakmuse$ pkg_add ocaml
-bash: pkg_add: command not found
ums-10-139-168-40:~ mubarakmuse$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
==> This script will install:
/usr/local/bin/brew
/usr/local/share/doc/homebrew
/usr/local/share/man/man1/brew.1
/usr/local/share/zsh/site-functions/_brew
/usr/local/etc/bash_completion.d/brew
/usr/local/Homebrew
==> The following existing directories will be made group writable:
/usr/local/bin
==> The following existing directories will have their owner set to mubarakmuse:
/usr/local/bin
==> The following existing directories will have their group set to admin:
/usr/local/bin
==> The following new directories will be created:
/usr/local/Cellar
/usr/local/Homebrew
/usr/local/Frameworks
/usr/local/etc
/usr/local/include
/usr/local/lib
/usr/local/opt
/usr/local/sbin
/usr/local/share
/usr/local/share/zsh
/usr/local/share/zsh/site-functions
/usr/local/var

Press RETURN to continue or any other key to abort
==> /usr/bin/sudo /bin/chmod u+rwx /usr/local/bin

WARNING: Improper use of the sudo command could lead to data loss
or the deletion of important system files. Please double-check your
typing when using sudo. Type "man sudo" for more information.

To proceed, enter your password, or type Ctrl-C to abort.

Password:
Sorry, try again.
Password:
==> /usr/bin/sudo /bin/chmod g+rwx /usr/local/bin
==> /usr/bin/sudo /usr/sbin/chown mubarakmuse /usr/local/bin
==> /usr/bin/sudo /usr/bin/chgrp admin /usr/local/bin
==> /usr/bin/sudo /bin/mkdir -p /usr/local/Cellar /usr/local/Homebrew /usr/local/Frameworks /usr/local/etc /usr/local/include /usr/local/lib /usr/local/opt /usr/local/sbin /usr/local/share /usr/local/share/zsh /usr/local/share/zsh/site-functions /usr/local/var
==> /usr/bin/sudo /bin/chmod g+rwx /usr/local/Cellar /usr/local/Homebrew /usr/local/Frameworks /usr/local/etc /usr/local/include /usr/local/lib /usr/local/opt /usr/local/sbin /usr/local/share /usr/local/share/zsh /usr/local/share/zsh/site-functions /usr/local/var
==> /usr/bin/sudo /bin/chmod 755 /usr/local/share/zsh /usr/local/share/zsh/site-functions
==> /usr/bin/sudo /usr/sbin/chown mubarakmuse /usr/local/Cellar /usr/local/Homebrew /usr/local/Frameworks /usr/local/etc /usr/local/include /usr/local/lib /usr/local/opt /usr/local/sbin /usr/local/share /usr/local/share/zsh /usr/local/share/zsh/site-functions /usr/local/var
==> /usr/bin/sudo /usr/bin/chgrp admin /usr/local/Cellar /usr/local/Homebrew /usr/local/Frameworks /usr/local/etc /usr/local/include /usr/local/lib /usr/local/opt /usr/local/sbin /usr/local/share /usr/local/share/zsh /usr/local/share/zsh/site-functions /usr/local/var
==> /usr/bin/sudo /bin/mkdir -p /Users/mubarakmuse/Library/Caches/Homebrew
==> /usr/bin/sudo /bin/chmod g+rwx /Users/mubarakmuse/Library/Caches/Homebrew
==> /usr/bin/sudo /usr/sbin/chown mubarakmuse /Users/mubarakmuse/Library/Caches/Homebrew
==> /usr/bin/sudo /bin/mkdir -p /Library/Caches/Homebrew
==> /usr/bin/sudo /bin/chmod g+rwx /Library/Caches/Homebrew
==> /usr/bin/sudo /usr/sbin/chown mubarakmuse /Library/Caches/Homebrew
==> Downloading and installing Homebrew...
remote: Counting objects: 7136, done.
remote: Compressing objects: 100% (4212/4212), done.
remote: Total 7136 (delta 4298), reused 4714 (delta 2705), pack-reused 0
Receiving objects: 100% (7136/7136), 3.72 MiB | 4.66 MiB/s, done.
Resolving deltas: 100% (4298/4298), done.
From https://github.com/Homebrew/brew
 * [new branch]      master     -> origin/master
 * [new tag]         0.1        -> 0.1
 * [new tag]         0.2        -> 0.2
 * [new tag]         0.3        -> 0.3
 * [new tag]         0.4        -> 0.4
 * [new tag]         0.5        -> 0.5
 * [new tag]         0.6        -> 0.6
 * [new tag]         0.7        -> 0.7
 * [new tag]         0.7.1      -> 0.7.1
 * [new tag]         0.8        -> 0.8
 * [new tag]         0.8.1      -> 0.8.1
 * [new tag]         0.9        -> 0.9
 * [new tag]         0.9.1      -> 0.9.1
 * [new tag]         0.9.2      -> 0.9.2
 * [new tag]         0.9.3      -> 0.9.3
 * [new tag]         0.9.4      -> 0.9.4
 * [new tag]         0.9.5      -> 0.9.5
 * [new tag]         0.9.8      -> 0.9.8
 * [new tag]         0.9.9      -> 0.9.9
 * [new tag]         1.0.0      -> 1.0.0
 * [new tag]         1.0.1      -> 1.0.1
 * [new tag]         1.0.2      -> 1.0.2
 * [new tag]         1.0.3      -> 1.0.3
 * [new tag]         1.0.4      -> 1.0.4
 * [new tag]         1.0.5      -> 1.0.5
 * [new tag]         1.0.6      -> 1.0.6
 * [new tag]         1.0.7      -> 1.0.7
 * [new tag]         1.0.8      -> 1.0.8
 * [new tag]         1.0.9      -> 1.0.9
 * [new tag]         1.1.0      -> 1.1.0
 * [new tag]         1.1.1      -> 1.1.1
 * [new tag]         1.1.10     -> 1.1.10
 * [new tag]         1.1.11     -> 1.1.11
 * [new tag]         1.1.12     -> 1.1.12
 * [new tag]         1.1.13     -> 1.1.13
 * [new tag]         1.1.2      -> 1.1.2
 * [new tag]         1.1.3      -> 1.1.3
 * [new tag]         1.1.4      -> 1.1.4
 * [new tag]         1.1.5      -> 1.1.5
 * [new tag]         1.1.6      -> 1.1.6
 * [new tag]         1.1.7      -> 1.1.7
 * [new tag]         1.1.8      -> 1.1.8
 * [new tag]         1.1.9      -> 1.1.9
 * [new tag]         1.2.0      -> 1.2.0
 * [new tag]         1.2.1      -> 1.2.1
 * [new tag]         1.2.2      -> 1.2.2
 * [new tag]         1.2.3      -> 1.2.3
 * [new tag]         1.2.4      -> 1.2.4
 * [new tag]         1.2.5      -> 1.2.5
 * [new tag]         1.2.6      -> 1.2.6
 * [new tag]         1.3.0      -> 1.3.0
 * [new tag]         1.3.1      -> 1.3.1
 * [new tag]         1.3.2      -> 1.3.2
HEAD is now at ef60688 Merge pull request #3126 from DomT4/curl_audit
==> Tapping homebrew/core
Cloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core'...
remote: Counting objects: 4569, done.
remote: Compressing objects: 100% (4357/4357), done.
remote: Total 4569 (delta 35), reused 463 (delta 11), pack-reused 0
Receiving objects: 100% (4569/4569), 3.64 MiB | 4.83 MiB/s, done.
Resolving deltas: 100% (35/35), done.
Checking connectivity... done.

breTapped 4353 formulae (4,613 files, 11.4MB)
w==> Cleaning up /Library/Caches/Homebrew...
==> Migrating /Library/Caches/Homebrew to /Users/mubarakmuse/Library/Caches/Home
==> Deleting /Library/Caches/Homebrew...
Already up-to-date.
==> Installation successful!

==> Homebrew has enabled anonymous aggregate user behaviour analytics.
Read the analytics documentation (and how to opt-out) here:
  https://docs.brew.sh/Analytics.html

==> Next steps:
- Run `brew help` to get started
- Further documentation: 
    https://docs.brew.sh
ums-10-139-168-40:~ mubarakmuse$ 
ums-10-139-168-40:~ mubarakmuse$ brew install ocaml
==> Downloading https://homebrew.bintray.com/bottles/ocaml-4.05.0.yosemite.bottl
######################################################################## 100.0%
==> Pouring ocaml-4.05.0.yosemite.bottle.tar.gz
🍺  /usr/local/Cellar/ocaml/4.05.0: 1,989 files, 206.8MB
ums-10-139-168-40:~ mubarakmuse$ brew install opam 
==> Installing dependencies for opam: ocamlbuild, camlp4, gringo, clasp, aspcud
==> Installing opam dependency: ocamlbuild
==> Downloading https://homebrew.bintray.com/bottles/ocamlbuild-0.11.0_2.yosemit
######################################################################## 100.0%
==> Pouring ocamlbuild-0.11.0_2.yosemite.bottle.tar.gz
🍺  /usr/local/Cellar/ocamlbuild/0.11.0_2: 28 files, 7MB
==> Installing opam dependency: camlp4
==> Downloading https://homebrew.bintray.com/bottles/camlp4-4.05+1.yosemite.bott
######################################################################## 100.0%
==> Pouring camlp4-4.05+1.yosemite.bottle.tar.gz
🍺  /usr/local/Cellar/camlp4/4.05+1: 165 files, 143.2MB
==> Installing opam dependency: gringo
==> Downloading https://homebrew.bintray.com/bottles/gringo-4.5.4.yosemite.bottl
######################################################################## 100.0%
==> Pouring gringo-4.5.4.yosemite.bottle.tar.gz
🍺  /usr/local/Cellar/gringo/4.5.4: 7 files, 5.7MB
==> Installing opam dependency: clasp
==> Downloading https://homebrew.bintray.com/bottles/clasp-3.3.2.yosemite.bottle
######################################################################## 100.0%
==> Pouring clasp-3.3.2.yosemite.bottle.tar.gz
🍺  /usr/local/Cellar/clasp/3.3.2: 7 files, 1.6MB
==> Installing opam dependency: aspcud
==> Downloading https://homebrew.bintray.com/bottles/aspcud-1.9.1.yosemite.bottl
######################################################################## 100.0%
==> Pouring aspcud-1.9.1.yosemite.bottle.2.tar.gz
🍺  /usr/local/Cellar/aspcud/1.9.1: 10 files, 479.9KB
==> Installing opam
==> Downloading https://homebrew.bintray.com/bottles/opam-1.2.2_3.yosemite.bottl
######################################################################## 100.0%
==> Pouring opam-1.2.2_3.yosemite.bottle.tar.gz
==> Caveats
OPAM uses ~/.opam by default for its package database, so you need to
initialize it first by running (as a normal user):

$  opam init

Run the following to initialize your environment variables:

$  eval `opam config env`

To export the needed variables every time, add them to your dotfiles.
  * On Bash, add them to `~/.bash_profile`.
  * On Zsh, add them to `~/.zprofile` or `~/.zshrc` instead.

Documentation and tutorials are available at https://opam.ocaml.org, or
via "man opam" and "opam --help".

Bash completion has been installed to:
  /usr/local/etc/bash_completion.d

zsh completions have been installed to:
  /usr/local/share/zsh/site-functions
==> Summary
🍺  /usr/local/Cellar/opam/1.2.2_3: 31 files, 16.3MB
ums-10-139-168-40:~ mubarakmuse$ which ocaml
/usr/local/bin/ocaml
ums-10-139-168-40:~ mubarakmuse$ ocaml
        OCaml version 4.05.0

# 
  
  use <lab01.ml>
  oca;;
Error: Unbound value use
# #use "lab01.ml";;
Cannot find file lab01.ml.
# #quit;;
ums-10-139-168-40:~ mubarakmuse$ cd csci2041/
ums-10-139-168-40:csci2041 mubarakmuse$ cd myfiles/
ums-10-139-168-40:myfiles mubarakmuse$ ocaml
        OCaml version 4.05.0

# #use "lab01.ml";;
val fib : int -> int = <fun>
# #use "lab01.ml";;
File "lab01.ml", line 7, characters 0-0:
Error: Syntax error
# #use "lab01.ml";;
val fib : int -> int = <fun>
# 
