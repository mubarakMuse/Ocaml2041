let rec pairwith x l =
     match l with
     | [] -> []
     | (h::t) -> (x,h) :: pairwith x t
(* it takes an element and a list then pairs each item in nth e list with the element and returns a list of tuples *)
(*
let rec addN l n =
     match l with
     | [] -> []
     | (h::t) -> (h+n) :: addN t
  it missing the int argument in final recursive call *)
  let rec addN =
     function
      | (_,[]) -> []
      | (n,(h::t)) -> (h+n) :: addN (n,t)

